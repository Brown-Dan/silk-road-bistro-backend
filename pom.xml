<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>uk.danbrown</groupId>
    <artifactId>ApprenticeshipChineseRestaurantBackend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>ApprenticeshipChineseRestaurantBackend</name>
    <description>ApprenticeshipChineseRestaurantBackend</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>21</java.version>
        <cucumber.version>7.18.0</cucumber.version>
        <jooq.version>3.19.8</jooq.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jooq</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq-codegen</artifactId>
            <version>${jooq.version}</version>
        </dependency>
        <dependency>
            <!--we need to pull in this dependency as the jooq dependency pulled in by spring-boot-starter-jooq is too
            low a version to support the jooq-codegen-maven plugin-->
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>${jooq.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-database-postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit-platform-engine</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-spring</artifactId>
            <version>${cucumber.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.24.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite</artifactId>
            <version>1.10.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>uk.co.autotrader</groupId>
            <artifactId>traverson4j-hc5</artifactId>
            <version>4.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>4.2.1</version>
        </dependency>
        <dependency>
            <groupId>org.mindrot</groupId>
            <artifactId>jbcrypt</artifactId>
            <version>0.4</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>9.22.2</version>
                <configuration>
                    <user>local</user>
                    <url>jdbc:postgresql://localhost:5432/ChineseRestaurant</url>
                    <password>local</password>
                    <table>changelog</table>
                    <locations>
                        <location>filesystem:src/main/resources/db/migration</location>
                    </locations>
                    <schemas>
                        <schema>ChineseRestaurant</schema>
                    </schemas>
                    <baselineOnMigrate>true</baselineOnMigrate>
                </configuration>
                <executions>
                    <execution>
                        <id>run-flyway</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>${jooq.version}</version>
                <executions>
                    <execution>
                        <id>generate-postgres</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jdbc>
                        <driver>org.postgresql.Driver</driver>
                        <url>jdbc:postgresql://localhost:5432/ChineseRestaurant</url>
                        <username>local</username>
                        <password>local</password>
                    </jdbc>
                    <generator>
                        <database>
                            <name>org.jooq.meta.postgres.PostgresDatabase</name>
                            <inputSchema>ChineseRestaurant</inputSchema>
                        </database>
                        <generate>
                            <generatedAnnotation>true</generatedAnnotation>
                            <javaTimeTypes>true</javaTimeTypes>
                            <deprecated>false</deprecated>
                            <relations>true</relations>
                            <records>false</records>
                            <pojos>true</pojos>
                            <pojosEqualsAndHashCode>true</pojosEqualsAndHashCode>
                            <fluentSetters>true</fluentSetters>
                        </generate>
                        <target>
                            <packageName>uk.co.autotrader.generated</packageName>
                            <directory>target/generated-sources</directory>
                        </target>
                        <strategy>
                            <name>com.jooqCustom.SuffixNameWithJooqEntity</name>
                            <java>package com.jooqCustom;

                                import org.jooq.codegen.DefaultGeneratorStrategy;
                                import org.jooq.meta.Definition;

                                public class SuffixNameWithJooqEntity extends DefaultGeneratorStrategy {

                                @Override
                                public String getJavaClassName(Definition definition, Mode mode) {
                                if(mode.equals(Mode.POJO)) {
                                return super.getJavaClassName(definition, mode) + "Entity";
                                }
                                return super.getJavaClassName(definition, mode);
                                }

                                }</java>
                        </strategy>
                    </generator>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
